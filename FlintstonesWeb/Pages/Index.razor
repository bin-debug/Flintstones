@page "/"
@inject IJSRuntime Js
@inject IDialogService DialogService
@using System.Text.Json
@using System.Net.Http.Headers
@inject IHttpClientFactory ClientFactory
@inject ISnackbar Snackbar

<div class="bg-indigo-600">
    <div class="max-w-7xl mx-auto py-3 px-3 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between flex-wrap">
            <div class="w-0 flex-1 flex items-center">
                <span class="flex p-2 rounded-lg bg-indigo-800">
                    <!-- Heroicon name: outline/speakerphone -->
                    <svg class="h-6 w-6 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z" />
                    </svg>
                </span>
                <p class="ml-3 font-medium text-white truncate">
                    <span class="md:hidden"> ATOMIC-LABS.CO </span>
                    <span class="hidden md:inline"> ATOMIC-LABS.CO </span>
                </p>
            </div>
            <div class="order-3 mt-2 flex-shrink-0 w-full sm:order-2 sm:mt-0 sm:w-auto">
                <MudButton Class="flex w-full sm:order-2 sm:mt-0 sm:w-auto items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-indigo-600 bg-white hover:bg-indigo-50 rounded-0" Variant="Variant.Filled" Color="Color.Success">CASHOUT / TRANSACTIONS</MudButton>
            </div>
            <div class="order-2 flex-shrink-0 sm:order-3 sm:ml-3">
                <button type="button" class="-mr-1 flex p-2 rounded-md hover:bg-indigo-500 focus:outline-none focus:ring-2 focus:ring-white sm:-mr-2">
                </button>
            </div>
        </div>
    </div>
</div>
<marquee class="w-full title-font text-lg text-white">
    Will the Bitcoin Price go
    <span class="bg-green-100 text-green-800 text-sm font-medium mr-2 px-2.5 py-0.5 dark:bg-blue-200 dark:text-green-800">UP</span>or
    <span class="bg-red-100 text-red-800 text-sm font-medium mr-2 px-2.5 py-0.5 dark:bg-red-200 dark:text-red-800">DOWN</span>...Place your bets now!
</marquee>

<section>
    <div class="container flex flex-col px-4 mx-auto md:space-y-0 md:flex-row">
        <div class="flex flex-col space-y-12 md:w-1/2">
            <div id="tradingview_bd4bd" style="height: 420px;"></div>
        </div>

        <div class="flex flex-col md:w-1/2">

            @if (activeTransactions > 0)
            {
                <span class="animate-pulse ml-2 mt-1 bg-green-100 text-green-800 text-sm font-medium mr-2 px-2.5 py-0.5 dark:bg-blue-200 dark:text-green-800">@activeTransactions ACTIVE TRANSACTIONS, CASHOUT AVAILABLE</span>
            }
            else
            {
                <span class="animate-pulse ml-2 mt-1 bg-green-100 text-green-800 text-sm font-medium mr-2 px-2.5 py-0.5 dark:bg-blue-200 dark:text-green-800">0 ACTIVE TRANSACTIONS, PLACE BETS</span>
            }

            <div class="md:grid grid-cols-1 gap-2 mx-2 sm:flex flex-col">

                <MudRadioGroup @bind-SelectedOption="@price_direction">
                    <MudRadio Option="true" Color="Color.Success" @onchange="() => CalculatePayout()">Price to go Up</MudRadio>
                    <MudRadio Option="false" Color="Color.Error" @onchange="() => CalculatePayout()">Price to go Down</MudRadio>
                </MudRadioGroup>

                <MudSlider @bind-Value="@stake" @onchange="() => CalculatePayout()"
                           Min="1" Max="10"
                           Variant="Variant.Filled"
                           ValueLabel="true" Size="Size.Large"
                           Color="Color.Info">Stake: R @stake.ToString()</MudSlider>

                <MudSlider @bind-Value="@duration" @onchange="() => CalculatePayout()"
                           Min="1" Max="5"
                           Variant="Variant.Filled"
                           ValueLabel="true" Size="Size.Large"
                           Color="Color.Info">Duration: @duration.ToString() min(s)</MudSlider>

                <MudField Label="Odds" Variant="Variant.Text">@odds</MudField>

                <MudField Label="Payout" Variant="Variant.Text">R @payout</MudField>

                <MudButton Class="rounded-0" FullWidth="true" Disabled="@_processing" Variant="Variant.Filled" Color="Color.Success" OnClick="ProcessSomething">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">PROCESSING...</MudText>
                    }
                    else
                    {
                        <MudText>SUBMIT BET</MudText>
                    }
                </MudButton>
            </div>
        </div>
    </div>
</section>

<footer class="container flex flex-col-reverse justify-between px-6 py-10 mx-auto space-y-8 md:flex-row md:space-y-0">
    Footer Navigation Menu
</footer>

@code {

    public bool price_direction { get; set; } = true;
    public int stake = 1;
    public int duration = 1;
    public decimal payout = 0;
    public decimal odds;
    private bool _processing = false;
    public List<DurationOdds> TimeOdds;
    public int activeTransactions = 0;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == true)
        {
            Js.InvokeAsync<object>("buildChart", "BINANCE:BTCUSDT");
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    protected override Task OnInitializedAsync()
    {
        TimeOdds = new List<DurationOdds>();

        for (int i = 1; i < 11; i++)
        {
            TimeOdds.Add(new DurationOdds { ID = Guid.NewGuid(), Duration = i, UpOdds = i, DownOdds = i + 1 });
        }

        CalculatePayout();
        return base.OnInitializedAsync();
    }

    public void CalculatePayout()
    {
        var selectedDuration = TimeOdds.FirstOrDefault(r => r.Duration == duration);

        odds = price_direction == true ? selectedDuration.UpOdds : selectedDuration.DownOdds;

        payout = stake * odds;
    }

    async Task ProcessSomething()
    {
        // do some sort of validation

        _processing = true;

        var model = new
        {
            clientID = 123,
            token = "123",
            stakeAmount = stake,
            market = "BTCUSDT",
            selection = price_direction == true ? 1 : 0,
            selectionOdd = odds,
            duration = duration
        };

        var json = JsonSerializer.Serialize(model);
        var client = ClientFactory.CreateClient();

        var content = new StringContent(json);
        content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

        var response = await client.PostAsync("https://rm-strike.azurewebsites.net/api/BetStrike?code=JPt1F63cxPC8BoFbhzJFxGZhqMdICmZwvv-CK9J_Dc78AzFu0Odoiw==", content);

        activeTransactions++;

        _processing = false;

        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("Bet successfully placed", Severity.Success);
    }

    public class DurationOdds
    {
        public Guid ID { get; set; }
        public int Duration { get; set; }
        public decimal UpOdds { get; set; }
        public decimal DownOdds { get; set; }
    }
}