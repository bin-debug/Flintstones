@page "/"
@inject IJSRuntime Js
@inject IDialogService DialogService
@using System.Text.Json
@using System.Net.Http.Headers
@using FlintstonesEntities
@using Microsoft.Extensions.Caching.Memory
@using Newtonsoft.Json
@using FlintstonesWeb.Service
@inject IHttpClientFactory ClientFactory
@inject ISnackbar Snackbar

@inject TransactionService TransactionService
@inject MarketService MarketService
@inject IMemoryCache MemoryCache

<div class="bg-blue-600">
    <div class="max-w-7xl mx-auto py-2 px-3 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between flex-wrap">
            <div class="w-0 flex-1 flex items-center">
                <span class="flex p-2 rounded-lg bg-blue-800">
                    <!-- Heroicon name: outline/speakerphone -->
                    <svg class="h-6 w-6 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z" />
                    </svg>
                </span>
                <p class="ml-3 font-medium text-white truncate">
                    <span class="md:hidden"> ATOMIC-LABS.CO </span>
                    <span class="hidden md:inline"> ATOMIC-LABS.CO </span>
                </p>
            </div>
            <div class="order-3 mt-2 flex-shrink-0 w-full sm:order-2 sm:mt-0 sm:w-auto">
                @*<MudButton Class="md:hidden sm:inline flex w-full sm:order-2 sm:mt-0 sm:w-auto items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-indigo-600 bg-white hover:bg-indigo-50 rounded-0" Variant="Variant.Filled" Color="Color.Success">CASHOUT / TRANSACTIONS</MudButton>*@
            </div>
            <div class="order-2 flex-shrink-0 sm:order-3 sm:ml-3">
                <button type="button" class="-mr-1 flex p-2 rounded-md hover:bg-indigo-500 focus:outline-none focus:ring-2 focus:ring-white sm:-mr-2">
                </button>
            </div>
        </div>
    </div>
</div>
@*<marquee class="w-full title-font text-lg text-white">
    Will the Bitcoin Price go
    <span class="bg-green-100 text-green-800 text-sm font-medium mr-2 px-2.5 py-0.5 dark:bg-blue-200 dark:text-green-800">UP</span>or
    <span class="bg-red-100 text-red-800 text-sm font-medium mr-2 px-2.5 py-0.5 dark:bg-red-200 dark:text-red-800">DOWN</span>...Place your bets now!
</marquee>*@

@*<div class="container flex flex-col px-4 mx-auto md:space-y-0 md:flex-row">
     <div class="bg-red-100 border-t border-b border-red-500 text-red-700 px-4 py-3 mb-2 "style="width:100%" role="alert">
              <p class="font-bold">Round Closed</p>
              <p class="text-sm">Next round starts in 15 seconds.</p>
            </div>
    </div>*@

<section>
    <div class="container flex flex-col px-4 mx-auto md:space-y-0 md:flex-row">
        <div class="flex flex-col space-y-12 md:w-1/2">
            <div id="tradingview_bd4bd" style="height: 420px;"></div>
        </div>

        <div class="flex flex-col md:w-1/2">

            @*@if (activeTransactions > 0)
            {
                <span class="animate-pulse ml-2 mt-1 bg-green-400 text-green-800 text-sm font-medium mr-2 px-2.5 py-0.5 dark:bg-blue-200 dark:text-green-800">@activeTransactions ACTIVE TRANSACTIONS</span>
            }
            else
            {
                <span class="ml-2 mt-1 bg-green-400 text-white text-sm font-medium mr-2 px-2.5 py-0.5 dark:bg-blue-200 dark:text-green-800">0 ACTIVE TRANSACTIONS, PLACE BETS</span>
            }*@

            <div class="md:grid grid-cols-1 gap-2 mx-2 sm:flex flex-col">

                <MudRadioGroup @bind-SelectedOption="@price_direction">
                    <MudRadio Option="true" Color="Color.Success" @onchange="() => CalculatePayout()">Price to go Up</MudRadio>
                    <MudRadio Option="false" Color="Color.Error" @onchange="() => CalculatePayout()">Price to go Down</MudRadio>
                </MudRadioGroup>

                <MudSlider @bind-Value="@stake" @onchange="() => CalculatePayout()"
                           Min="1" Max="10"
                           Variant="Variant.Filled"
                           ValueLabel="true" Size="Size.Large"
                           Color="Color.Info">Stake: R @stake.ToString()</MudSlider>

                <MudSlider @bind-Value="@duration" @onchange="() => CalculatePayout()"
                           Min="30" Max="120" Step="15" TickMarks="true"
                           Variant="Variant.Filled"
                           ValueLabel="true" Size="Size.Large"
                           Color="Color.Info">Duration: @duration.ToString() secs</MudSlider>

                <MudField Label="Odds" Variant="Variant.Text">@odds.ToString("N2")</MudField>

                <MudField Label="Payout" Variant="Variant.Text">R @payout.ToString("N2")</MudField>

                <MudButton Class="rounded-0 mt-2" FullWidth="true" Disabled="@_processing" Variant="Variant.Filled" Color="Color.Success" OnClick="ProcessSomething">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">PROCESSING...</MudText>
                    }
                    else
                    {
                        <MudText>SUBMIT BET</MudText>
                    }
                </MudButton>
            </div>
        </div>
    </div>
</section>


<section>
    <div class="container flex flex-col px-4 mt-2 mx-auto md:space-y-0 md:flex-row">
        <div class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-6">
            @foreach (var item in transactions)
            {
                <div class="p-2 max-w-sm bg-dark border border-gray-800 shadow-md dark:bg-gray-800 dark:border-gray-700">
                    <div class="flex items-center space-x-2">

                        @if (item.StatusID == 1)
                        {
                            <div class="animate-pulse w-2 h-10 bg-blue-400"></div>
                        }
                        else if (item.StatusID == 2)
                        {
                            <div class="w-2 h-10 bg-green-400"></div>
                        }
                        else if (item.StatusID == 3)
                        {
                            <div class="w-2 h-10 bg-red-400"></div>
                        }
                        else
                        {
                            <div class="w-2 h-10 bg-purple-400"></div>
                        }

                        <div class="space-y-1 font-medium dark:text-white">
                            <div>@item.DateTime - (@item.MarketName)</div>
                            <div class="text-sm text-gray-500 dark:text-gray-400">@item.Description</div>
                            <div>
                                @if (item.StatusID == 1)
                                {
                                    <div class="text-blue-400">ACTIVE</div>
                                }
                                else if (item.StatusID == 2)
                                {
                                    <div>PAYOUT = @($"R{item.Payout.ToString("N2")}")</div>
                                }
                                else
                                {
                                    <div>PAYOUT = R0</div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</section>



<footer class="container flex flex-col-reverse justify-between px-6 py-2 mx-auto space-y-4 md:flex-row md:space-y-0">
    atomic-labs.co
</footer>

@code {

    public bool price_direction { get; set; } = true;
    public int stake = 1;
    public int duration = 1;
    public double payout = 0;
    public double odds;
    private bool _processing = false;
    public List<DurationOdds> TimeOdds;
    public int activeTransactions = 0;
    public List<Transactions> transactions;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == true)
        {
            Js.InvokeAsync<object>("buildChart", "BINANCE:BTCUSDT");
        }

        var s = MemoryCache.Get("markets");

        return base.OnAfterRenderAsync(firstRender);
    }

    protected override Task OnInitializedAsync()
    {
        TimeOdds = new List<DurationOdds>();
        transactions = new List<Transactions>();

        for (int i = 1; i < 200; i++)
        {
            TimeOdds.Add(new DurationOdds { ID = Guid.NewGuid(), Duration = i, UpOdds = i/17.3, DownOdds = i/19.4 });
        }

        //PopulateTransactions();
        TransactionService.clientid = 123;
        TransactionService.pagesize = 8;
        TransactionService.OnTransactionsChanged += HandleTransactionsChange;


        return base.OnInitializedAsync();
    }

    private void HandleTransactionsChange(List<BetEntity> bets)
    {
        transactions = new List<Transactions>();

        foreach (var item in bets)
        {
            string direction = item.Selection == 1 ? "UP" : "DOWN";

            transactions.Add(new Transactions
                {
                    ID = item.RowKey,
                    Payout = item.TotalPayout,
                    MarketName = item.Market.ToUpper(),
                    StatusID = item.StatusID,
                    DateTime = item.CreatedDate,
                    Duration = item.Duration,
                    Description = $"R{item.StakeAmount} for Price ({item.CurrentMarketPrice}) to go {direction} in {item.Duration} secs | odds {item.SelectionOdd.ToString("N2")}"
                });
        }

        activeTransactions = bets.Count(r => r.StatusID == 1);
        InvokeAsync(StateHasChanged);

        if (activeTransactions == 0)
            TransactionService.OnTransactionsChanged -= HandleTransactionsChange;
    }

    public void CalculatePayout()
    {
        var selectedDuration = TimeOdds.FirstOrDefault(r => r.Duration == duration);

        odds = price_direction == true ? selectedDuration.UpOdds : selectedDuration.DownOdds;

        payout = stake * odds;
        InvokeAsync(StateHasChanged);
    }

    async Task ProcessSomething()
    {
        // do some sort of validation

        _processing = true;

        var model = new
        {
            clientID = 123,
            token = "123",
            stakeAmount = stake,
            market = "BTCUSDT",
            selection = price_direction == true ? 1 : 0,
            selectionOdd = odds,
            duration = duration
        };

        var json = JsonConvert.SerializeObject(model);
        var client = ClientFactory.CreateClient();

        var content = new StringContent(json);
        content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

        //http://localhost:7085/api/BetStrike

        //var response = await client.PostAsync("https://rm-strike.azurewebsites.net/api/BetStrike?code=F4hkm26H1s4t47wSdg6Dw3K5HfjnUgVXZPB4ieO-XMZaAzFuCpAOEg==", content);
        var response = await client.PostAsync("http://localhost:7085/api/BetStrike", content);


        activeTransactions++;

        _processing = false;

        TransactionService.OnTransactionsChanged += HandleTransactionsChange;

        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("Bet successfully placed", Severity.Success);
    }

    public class DurationOdds
    {
        public Guid ID { get; set; }
        public int Duration { get; set; }
        public double UpOdds { get; set; }
        public double DownOdds { get; set; }
    }

    public class Transactions
    {
        public string ID { get; set; }
        public string Description { get; set; }
        public double Payout { get; set; }
        public int StatusID { get; set; }
        public int Duration { get; set; }
        public string MarketName { get; set; }
        public DateTime DateTime { get; set; }
    }
}