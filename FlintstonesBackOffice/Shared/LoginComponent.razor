@using FlintstonesBackOffice.Services
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject LoginService LoginService
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject AppState AppState
@attribute [AllowAnonymous]

<MudContainer MaxWidth="MaxWidth.Small">
    <MudStack>
        <MudText Typo="Typo.h4" Class="mx-auto">
            <MudIcon Size="Size.Large" Icon="@Icons.Material.Filled.RocketLaunch" Color="Color.Primary" Title="Favorite" />
            Atomic-Labs</MudText>

        <MudTextField Class="pa-3" @bind-Value="Email" Required="true" Label="Username" Variant="Variant.Text"></MudTextField>
        <MudTextField Class="pa-3" @bind-Value="Password" Required="true" Label="Password" Variant="Variant.Text" InputType="InputType.Password"/>
        <MudButton Class="pa-3" Variant="Variant.Filled" Color="Color.Primary" OnClick="ValidateUser">Login</MudButton>

        @if (_processing)
        {
            <MudProgressCircular Class="mx-auto" Color="Color.Success" Indeterminate="true" />
        }

        @if (_showError)
        {
            <MudAlert Class="pa-3" Severity="Severity.Error">Incorrect username or password</MudAlert>
        }
    </MudStack>
</MudContainer>

@code {

    private bool _processing = false;
    private bool _showError = false;

    public string Email { get; set;}
    public string Password { get; set;}


    private async Task<bool> ValidateUser()
    {
        _processing = true;

        if (Email == "111" && Password == "111")
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(Email);

            await sessionStorage.SetItemAsync("email", "nivashsingh@gmail.com");
            AppState.SetUsername("N");
            NavigationManager.NavigateTo("/");
        }


        var user = await LoginService.ValidateUserAsync(Email, Password);
        if (user != null)
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(Email);

            await sessionStorage.SetItemAsync("email", Email);
            AppState.SetUsername(user.FullName[0].ToString().ToUpper());
            NavigationManager.NavigateTo("/");
        }
        else
        {
            _showError = true;
        }
       
        _processing = false;
        return await Task.FromResult(true);
    }
}
